

import com.itextpdf.text.Paragraph;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import com.itextpdf.text.pdf.collection.PdfTargetDictionary;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import java.io.FileOutputStream;

import com.mongodb.client.*;
import com.mongodb.client.model.Updates;
import org.bson.Document;
import static com.mongodb.client.model.Filters.eq;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;

public class SellMedicine extends javax.swing.JFrame {
    public String numberPattern = "^[0-9]*$";
    private  int finalTotalPrice = 0;
    private String billID = "";
    private String username = "";

    /**
     * Creates new form SellMedicine
     */
    public SellMedicine() {
        initComponents();
    }
    public SellMedicine(String tempUser) {
        initComponents();
        username = tempUser;
        setLocationRelativeTo(null);
        setResizable(false);

    }

    private void medicineName(String nameORuniqueId)
    {
        DefaultTableModel model = (DefaultTableModel) medicineListTable.getModel();
        model.setRowCount(0);
        try{
            // Establishing a connection to the MongoDB server
            MongoClient mongoClient = MongoClients.create("mongodb://localhost:27017");
            MongoDatabase database = mongoClient.getDatabase("Pharmacy");
            MongoCollection<Document> collection = database.getCollection("medicine_inventory");

            Document query = new Document("$or",
                    Arrays.asList(
                            new Document("name", new Document("$regex", "^" + nameORuniqueId)),
                            new Document("uniqueID", new Document("$regex", "^" + nameORuniqueId))
                    )
            );

            MongoCursor<Document> cursor = collection.find(query).iterator();

            while (cursor.hasNext()) {
                Document document = cursor.next();
                model.addRow(new Object[]{document.getString("uniqueID") + "- " + document.getString("name")});
            }

// Close the cursor and the MongoDB client
            cursor.close();
            mongoClient.close();

        }catch (Exception e){
            JOptionPane.showMessageDialog(null,e);
        }
    }
    private void clearMedicineFields()
    {
        name.setText("");
        company.setText("");
        priceperunit.setText("");
        quantity.setText("");
        totalprice.setText("");
    }
    public String getuniqueId(String prefix)
    {
        return prefix + System.nanoTime();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel2 = new javax.swing.JLabel();
        search = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        medicineListTable = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        name = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        company = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        priceperunit = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        quantity = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        totalprice = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        cartTable = new javax.swing.JTable();
        addtocart = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        tbill = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel1.setText("Sell Medicine");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(487, 18, -1, -1));
        getContentPane().add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 72, 1336, 10));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel2.setText("Search");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(36, 125, -1, -1));

        search.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        search.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                searchKeyReleased(evt);
            }
        });
        getContentPane().add(search, new org.netbeans.lib.awtextra.AbsoluteConstraints(91, 122, 245, -1));

        medicineListTable.setModel(new javax.swing.table.DefaultTableModel(
                new Object [][] {

                },
                new String [] {
                        "Medicine"
                }
        ));
        medicineListTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                medicineListTableMouseClicked(evt);
            }
        });
        medicineListTable.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                medicineListTableComponentShown(evt);
            }
        });
        jScrollPane1.setViewportView(medicineListTable);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(36, 162, 300, 563));

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel4.setText("Name");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 130, 74, -1));

        name.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        getContentPane().add(name, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 130, 245, -1));

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel5.setText("Company");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 170, 74, -1));

        company.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        getContentPane().add(company, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 170, 245, -1));

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel6.setText("Price per unit");
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(826, 125, -1, -1));

        priceperunit.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        getContentPane().add(priceperunit, new org.netbeans.lib.awtextra.AbsoluteConstraints(931, 122, 245, -1));

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel7.setText("Quantity");
        getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(826, 168, 74, -1));

        quantity.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        quantity.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                quantityKeyReleased(evt);
            }
        });
        getContentPane().add(quantity, new org.netbeans.lib.awtextra.AbsoluteConstraints(931, 165, 245, -1));

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel8.setText("Total price");
        getContentPane().add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(826, 208, 74, -1));

        totalprice.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        getContentPane().add(totalprice, new org.netbeans.lib.awtextra.AbsoluteConstraints(931, 205, 245, -1));

        cartTable.setModel(new javax.swing.table.DefaultTableModel(
                new Object [][] {

                },
                new String [] {
                        "Name", "Company", "Price per unit", "Quantity", "Total price"
                }
        ));
        jScrollPane2.setViewportView(cartTable);
        cartTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cartTableMouseClicked(evt);
            }
        });

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(425, 298, 751, 207));

        addtocart.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        addtocart.setText("Add to cart");
        addtocart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addtocartActionPerformed(evt);
            }
        });
        getContentPane().add(addtocart, new org.netbeans.lib.awtextra.AbsoluteConstraints(1083, 253, -1, -1));

        jLabel9.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel9.setText("Rs:");
        getContentPane().add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 523, -1, -1));

        tbill.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        tbill.setText("00");
        getContentPane().add(tbill, new org.netbeans.lib.awtextra.AbsoluteConstraints(715, 523, 43, -1));

        jButton3.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jButton3.setText("Purchase & Print");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(1042, 533, 134, -1));

        jButton1.setText("Back");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 30, -1, -1));

        pack();
    }// </editor-fold>

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        if (finalTotalPrice != 0){
            billID = getuniqueId("Bill-");
            DefaultTableModel dtm = (DefaultTableModel) cartTable.getModel();
            if(cartTable.getRowCount()!=0){
                for (int i = 0 ; i< cartTable.getRowCount(); i++){
                    try{
                        MongoClient mongoClient = MongoClients.create("mongodb://localhost:27017");

                        MongoDatabase database = mongoClient.getDatabase("Pharmacy");

                        MongoCollection<Document> collection = database.getCollection("medicine_inventory");

                        String medicineName = name.getText();
                        int quantityToSubtract = Integer.parseInt(dtm.getValueAt(i, 3).toString());

                        collection.updateOne(eq("name", medicineName),
                                Updates.inc("quantity", -quantityToSubtract));

                        JOptionPane.showMessageDialog(null, "Purchased Successfully!. Bill Generated and Saved to Drive D");

                        mongoClient.close();
                    }catch (Exception e){
                        JOptionPane.showMessageDialog(null,e);
                    }
                }
            }
            try {

                MongoClient mongoClient = MongoClients.create("mongodb://localhost:27017");
                MongoDatabase database = mongoClient.getDatabase("Pharmacy");
                MongoCollection<Document> collection = database.getCollection("customer");

                Document document = new Document();
                document.append("Customer_ID", billID);
                document.append("Medicine_Name",name.getText().toString());
                document.append("Total Paid",finalTotalPrice);

                collection.insertOne(document);

                mongoClient.close();
            }catch (Exception e){
                JOptionPane.showMessageDialog(null,e);
            }
            try{
                SimpleDateFormat myFormat = new SimpleDateFormat("dd-MM-yyyy");
                Calendar cal = Calendar.getInstance();
                // Establishing a connection to the MongoDB server
                MongoClient mongoClient = MongoClients.create("mongodb://localhost:27017");

                MongoDatabase database = mongoClient.getDatabase("Pharmacy");

                MongoCollection<Document> collection = database.getCollection("bills");

                Document billDocument = new Document("billID", billID)
                        .append("billDate", myFormat.format(cal.getTime()))
                        .append("totalPaid", finalTotalPrice)
                        .append("GeneratedBy", username);

// Inserting the document into the collection
                collection.insertOne(billDocument);

// Closing the MongoDB client connection
                mongoClient.close();
            }catch (Exception e){
                JOptionPane.showMessageDialog(null,e);
            }

            //Creating PDF
            com.itextpdf.text.Document doc = new com.itextpdf.text.Document();
            try{
                PdfWriter.getInstance(doc,new FileOutputStream(PharmacyFunction.billpath+"\\"+billID+".pdf"));
                doc.open();
                Paragraph pharmacyName = new Paragraph("\tPharmacy Management System\n");
                doc.add(pharmacyName);
                Paragraph line = new Paragraph("---------------------------------------------------");
                doc.add(line);
                Paragraph details = new Paragraph("\tBill ID: "+billID+"\nDate: "+new Date()+"\nTotal Paid: "+finalTotalPrice);
                doc.add(details);
                doc.add(line);
                PdfPTable tb1 = new PdfPTable(5);
                tb1.addCell("Name");
                tb1.addCell("Company Name");
                tb1.addCell("Price Per Unit");
                tb1.addCell("Quantity");
                tb1.addCell("Total Price");
                for (int i = 0 ; i<cartTable.getRowCount() ; i++){
                    String a = cartTable.getValueAt(i,0).toString();
                    String b = cartTable.getValueAt(i,1).toString();
                    String c = cartTable.getValueAt(i,2).toString();
                    String d = cartTable.getValueAt(i,3).toString();
                    String e = cartTable.getValueAt(i,4).toString();

                    tb1.addCell(a);
                    tb1.addCell(b);
                    tb1.addCell(c);
                    tb1.addCell(d);
                    tb1.addCell(e);
                }
                doc.add(tb1);
                doc.add(line);
                Paragraph thanksMsg = new Paragraph("Thank You! Please Vist Again");
                doc.add(thanksMsg);
                // Open PDF
                openPDF.openById(String.valueOf(billID));
            }catch(Exception e){
                JOptionPane.showMessageDialog(null,e);
            }
            doc.close();
            setVisible(false);
            new SellMedicine(username).setVisible(true);
        }else{
            JOptionPane.showMessageDialog(null,"Please add some medicine to Cart");
        }
    }

    private void medicineListTableComponentShown(java.awt.event.ComponentEvent evt) {
        // TODO add your handling code here:
    }

    private void formComponentShown(java.awt.event.ComponentEvent evt) {
        // TODO add your handling code here:
        medicineName("");
        name.setEditable(false);
        company.setEditable(false);
        totalprice.setEditable(false);
        totalprice.setEditable(false);
    }

    private void searchKeyReleased(java.awt.event.KeyEvent evt) {
        // TODO add your handling code here:
        String Search = search.getText();
        medicineName(Search);
    }

    private void medicineListTableMouseClicked(java.awt.event.MouseEvent evt) {
        // TODO add your handling code here:
        int index = medicineListTable.getSelectedRow();
        TableModel model = medicineListTable.getModel();
        String nameoruniqueId = model.getValueAt(index,0).toString();

        String uniqueId[] = nameoruniqueId.split("-",0);
        try{
            // Establishing a connection to the MongoDB server
            MongoClient mongoClient = MongoClients.create("mongodb://localhost:27017");

// Accessing the database
            MongoDatabase database = mongoClient.getDatabase("Pharmacy");

// Accessing the collection
            MongoCollection<Document> collection = database.getCollection("medicine_inventory");

// Finding the document with the specified uniqueId

            Document query = new Document("uniqueID", uniqueId[0]);
            Document result = collection.find(query).first();

            if (result != null) {
                // Retrieve the desired fields from the document
                String nameValue = result.getString("name");
                String companyNameValue = result.getString("companyName");
                int priceValue = result.getInteger("price");

                // Update the corresponding text fields
                name.setText(nameValue);
                company.setText(companyNameValue);
                priceperunit.setText(String.valueOf(priceValue));
                quantity.setText("");
                totalprice.setText("");
            }
        }catch(Exception e){
            JOptionPane.showMessageDialog(null,e);
        }

    }

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        this.dispose();
        new SalesPerson(username).setVisible(true);
    }
    private void quantityKeyReleased(java.awt.event.KeyEvent evt) {
        // TODO add your handling code here:
         String unit = quantity.getText();
         if(!unit.equals("")){
             String price = priceperunit.getText();
             if(!unit.matches(numberPattern)){
                 JOptionPane.showMessageDialog(null,"Quantity field invalid");
             }
             int calculatedprice = Integer.parseInt(unit)*Integer.parseInt(price);
             totalprice.setText(String.valueOf(calculatedprice));
         }
         else{
             totalprice.setText("");
         }
    }
    private void addtocartActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        String units = quantity.getText();

        if (!units.equals("")){
            String medname =name.getText();
            String companyName = company.getText();
            String price = priceperunit.getText();
            String Tprice = totalprice.getText();
            int chkstock = 0 ;
            int chkexistence = 0;
            try{
                // Establishing a connection to the MongoDB server
                MongoClient mongoClient = MongoClients.create("mongodb://localhost:27017");

// Accessing the database
                MongoDatabase database = mongoClient.getDatabase("Pharmacy");

// Accessing the collection
                MongoCollection<Document> collection = database.getCollection("medicine_inventory");

// Querying the collection for documents with matching name
                String medName = medname;

                Document query = new Document("name", medName);
                Document result = collection.find(query).first();

                if (result != null) {
                    int quantity = result.getInteger("quantity");

                    if (quantity >= Integer.parseInt(units)) {
                        // Sufficient quantity available
                        chkstock = 1;
                    } else {
                        JOptionPane.showMessageDialog(null, "Quantity Exceeded. Only " + quantity + " left");
                    }
                }

            }catch (Exception e){
                JOptionPane.showMessageDialog(null,e);
            }
            if (chkstock ==1 ){
                DefaultTableModel dtm = (DefaultTableModel) cartTable.getModel();
                if(cartTable.getRowCount() !=0){
                    for (int i = 0 ; i < cartTable.getRowCount(); i++){
                        if(dtm.getValueAt(i,0)==medname){
                            chkexistence=1;
                            JOptionPane.showMessageDialog(null,"Medicine Already Exist in Cart");
                        }
                    }
                }
                if(chkexistence==0){
                    dtm.addRow(new Object[]{medname,companyName,price,units,Tprice});
                    finalTotalPrice = finalTotalPrice +Integer.parseInt(Tprice);
                    tbill.setText(String.valueOf(finalTotalPrice));
                    JOptionPane.showMessageDialog(null,"Added Successfully");
                }
            }
        }else {
            JOptionPane.showMessageDialog(null,"Quantity Field is Required");
        }
    }
    private void cartTableMouseClicked(java.awt.event.MouseEvent evt) {
        // TODO add your handling code here:
        int index = cartTable.getSelectedRow();
        int a = JOptionPane.showConfirmDialog(null,"Do you want to remove this Medicine","Select",JOptionPane.YES_NO_OPTION);
        if(a==0){
            TableModel model = cartTable.getModel();
            String total = model.getValueAt(index,4).toString();
            finalTotalPrice = finalTotalPrice - Integer.parseInt(total);
            tbill.setText(String.valueOf(finalTotalPrice));
            ((DefaultTableModel) cartTable.getModel()).removeRow(index);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SellMedicine.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SellMedicine.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SellMedicine.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SellMedicine.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SellMedicine().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify
    private javax.swing.JTextField company;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton addtocart;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel tbill;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTable cartTable;
    private javax.swing.JTable medicineListTable;
    private javax.swing.JTextField name;
    private javax.swing.JTextField priceperunit;
    private javax.swing.JTextField quantity;
    private javax.swing.JTextField search;
    private javax.swing.JTextField totalprice;
    // End of variables declaration                   
}
